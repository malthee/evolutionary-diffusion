from typing import Callable, Tuple
from datasets import load_dataset
from evolutionary.prompt_encoding.image_creation import PromptEmbeddingImageCreator, A
import torch


def clamp_range_from_parti(creator: PromptEmbeddingImageCreator[A],
                           lambda_accessor: Callable[[A], torch.Tensor]) -> Tuple[float, float]:
    """
    Calculate the clamp range (min and max values) for the embeddings generated by the PromptEmbeddingImageCreator
    across all prompts in the Parti prompts dataset. Useful for restricting variation in the evolutionary process.

    Args:
    - creator (PromptEmbeddingImageCreator): An instance of PromptEmbeddingImageCreator.
    - lambda_accessor (Callable): A lambda function to access the embedding tensor from an object of type A.

    Returns:
    - Tuple[float, float]: The minimum and maximum values across all tensors.
    """

    # Load all Parti prompts
    prompts_dataset = load_dataset("nateraw/parti-prompts")
    all_prompts = [prompt["Prompt"] for prompt in prompts_dataset["train"]]

    # Initialize max and min values
    max_value = -float("inf")
    min_value = float("inf")

    for prompt in all_prompts:
        argument = creator.arguments_from_prompt(prompt)
        tensor = lambda_accessor(argument)

        max_value = max(max_value, tensor.max().item())
        min_value = min(min_value, tensor.min().item())

    return min_value, max_value

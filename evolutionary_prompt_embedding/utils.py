from typing import Callable, Tuple
from datasets import load_dataset
from evolutionary_prompt_embedding.image_creation import PromptEmbeddingImageCreator, A
import torch


def clamp_range_from_parti(creator: PromptEmbeddingImageCreator[A],
                           lambda_accessor: Callable[[A], torch.Tensor]) -> Tuple[float, float]:
    """
    Calculate the clamp range (min and max values) for the embeddings generated by the PromptEmbeddingImageCreator
    across all prompts in the Parti prompts dataset. Useful for restricting variation in the evolutionary process.

    Args:
    - creator (PromptEmbeddingImageCreator): An instance of PromptEmbeddingImageCreator.
    - lambda_accessor (Callable): A lambda function to access the embedding tensor from an object of type A.

    Returns:
    - Tuple[float, float]: The minimum and maximum values across all tensors.
    """

    # Load all Parti prompts
    prompts_dataset = load_dataset("nateraw/parti-prompts")
    all_prompts = [prompt["Prompt"] for prompt in prompts_dataset["train"]]

    # Initialize max and min values
    max_value = -float("inf")
    min_value = float("inf")

    for prompt in all_prompts:
        argument = creator.arguments_from_prompt(prompt)
        tensor = lambda_accessor(argument)

        max_value = max(max_value, tensor.max().item())
        min_value = min(min_value, tensor.min().item())

    return min_value, max_value


def clamp_range_per_entry(creator: PromptEmbeddingImageCreator[A],
                          lambda_accessor: Callable[[A], torch.Tensor]) -> Tuple[torch.Tensor, torch.Tensor]:
    """
    Calculate the clamp range (min and max values) for each entry in the embeddings generated by the
    PromptEmbeddingImageCreator across all prompts in the Parti prompts dataset.
    More detailed than clamp_range_from_parti, useful for restricting variation in the evolutionary process.

    Args:
    - creator (PromptEmbeddingImageCreator): An instance of PromptEmbeddingImageCreator.
    - lambda_accessor (Callable): A lambda function to access the embedding tensor from an object of type A.

    Returns:
    - Tuple[torch.Tensor, torch.Tensor]: Two tensors representing the minimum and maximum values for each entry.
    """

    # Assume load_dataset is defined elsewhere and loads your specific dataset
    prompts_dataset = load_dataset("nateraw/parti-prompts")
    all_prompts = [prompt["Prompt"] for prompt in prompts_dataset["train"]]

    # Assume the first tensor's shape to initialize min and max tensors
    first_argument = creator.arguments_from_prompt(all_prompts[0])
    first_tensor = lambda_accessor(first_argument)
    min_values = first_tensor.clone()
    max_values = first_tensor.clone()

    for prompt in all_prompts[1:]:  # Start from the second item as the first is already considered
        argument = creator.arguments_from_prompt(prompt)
        tensor = lambda_accessor(argument)

        # Update min and max values
        min_values = torch.min(min_values, tensor)
        max_values = torch.max(max_values, tensor)

    return min_values, max_values
